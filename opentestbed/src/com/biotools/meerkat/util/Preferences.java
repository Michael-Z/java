/*     */ package com.biotools.meerkat.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.IOException;
/*     */ import java.io.RandomAccessFile;
/*     */ import java.io.Serializable;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Iterator;
/*     */ import java.util.Set;
/*     */ import java.util.SortedSet;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.TreeSet;
/*     */ import java.util.Vector;
/*     */ 
/*     */ public class Preferences
/*     */   implements Serializable
/*     */ {
/*  16 */   private Hashtable prefs = new Hashtable();
/*     */   private File file;
/*     */   private Vector listeners;
/*  19 */   private boolean dirty = false;
/*     */ 
/*     */   public Preferences()
/*     */   {
/*     */   }
/*     */ 
/*     */   public Preferences(Preferences p) {
/*  26 */     this.dirty = p.dirty;
/*  27 */     this.file = p.file;
/*  28 */     this.prefs = new Hashtable(p.prefs);
/*     */   }
/*     */ 
/*     */   public Preferences(File f)
/*     */   {
/*  36 */     this.file = f;
/*  37 */     loadPreferences(this.file);
/*     */   }
/*     */ 
/*     */   public Preferences(String fname)
/*     */   {
/*  46 */     this.file = new File(fname);
/*  47 */     loadPreferences(this.file);
/*     */   }
/*     */ 
/*     */   public Preferences(String prefstr, String delimiter)
/*     */   {
/*  54 */     String[] pairs = prefstr.split(delimiter);
/*  55 */     for (int i = 0; i < pairs.length; i++)
/*  56 */       parsePrefLine(pairs[i]);
/*     */   }
/*     */ 
/*     */   private void parsePrefLine(String s)
/*     */   {
/*  61 */     if ((s.startsWith("#")) || (s.length() <= 2))
/*  62 */       return;
/*  63 */     if (s.startsWith(">")) {
/*  64 */       StringTokenizer st = new StringTokenizer(s, ">");
/*  65 */       if (st.countTokens() == 1) {
/*  66 */         String fn = st.nextToken();
/*  67 */         String path = this.file.getParent();
/*  68 */         if (path != null)
/*  69 */           loadPreferences(new File(path + "/" + fn));
/*     */         else
/*  71 */           loadPreferences(this.file);
/*     */       }
/*     */     }
/*     */     else {
/*  75 */       StringTokenizer st = new StringTokenizer(s, "=");
/*  76 */       if (st.countTokens() == 2) {
/*  77 */         this.prefs.put(st.nextToken(), unescapeString(st.nextToken()));
/*  78 */       } else if ((st.countTokens() == 1) && 
/*  79 */         (s.endsWith("=")))
/*     */       {
/*  81 */         String entry = st.nextToken();
/*  82 */         this.prefs.put(entry, "");
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */   public boolean empty()
/*     */   {
/*  89 */     return this.prefs.size() == 0;
/*     */   }
/*     */ 
/*     */   public void clearAll() {
/*  93 */     this.prefs.clear();
/*     */   }
/*     */ 
/*     */   public String[] keys() {
/*  97 */     Set s = this.prefs.keySet();
/*  98 */     return (String[])s.toArray(new String[s.size()]);
/*     */   }
/*     */ 
/*     */   public synchronized String getPreference(String name, String def)
/*     */   {
/* 108 */     String s = (String)this.prefs.get(name);
/* 109 */     if (s == null) return def;
/* 110 */     return s;
/*     */   }
/*     */ 
/*     */   public synchronized String getPreference(String name)
/*     */   {
/* 120 */     return (String)this.prefs.get(name);
/*     */   }
/*     */ 
/*     */   public synchronized int getIntPreference(String name)
/*     */   {
/*     */     try
/*     */     {
/* 131 */       String s = getPreference(name);
/* 132 */       if (s != null) {
/* 133 */         return Integer.parseInt(s);
/*     */       }
/* 135 */       return -1;
/*     */     } catch (NullPointerException npe) {
/* 137 */       return -1; } catch (Exception e) {
/*     */     }
/* 139 */     return -1;
/*     */   }
/*     */ 
/*     */   public synchronized int getIntPreference(String name, int def)
/*     */   {
/* 149 */     String s = getPreference(name);
/* 150 */     if (s != null) {
/* 151 */       return Integer.parseInt(s);
/*     */     }
/* 153 */     return def;
/*     */   }
/*     */ 
/*     */   public synchronized long getLongPreference(String name, long def)
/*     */   {
/*     */     try
/*     */     {
/* 165 */       String s = getPreference(name);
/* 166 */       if (s != null) {
/* 167 */         return Long.parseLong(s);
/*     */       }
/* 169 */       return def;
/*     */     } catch (Exception e) {
/*     */     }
/* 172 */     return def;
/*     */   }
/*     */ 
/*     */   public synchronized double getDoublePreference(String name, double def)
/*     */   {
/* 184 */     String str = getPreference(name);
/* 185 */     if (str == null) return def;
/* 186 */     return Double.parseDouble(str);
/*     */   }
/*     */ 
/*     */   public synchronized double getDoublePreference(String name)
/*     */   {
/* 196 */     String str = getPreference(name);
/* 197 */     if (str == null) return -1.0D;
/* 198 */     return Double.parseDouble(str);
/*     */   }
/*     */ 
/*     */   public synchronized boolean getBooleanPreference(String name)
/*     */   {
/* 207 */     String str = getPreference(name);
/* 208 */     if (str == null) return false;
/* 209 */     return str.equals("true");
/*     */   }
/*     */ 
/*     */   public synchronized boolean getBoolean(String name, boolean bool) {
/* 213 */     return getBooleanPreference(name, bool);
/*     */   }
/*     */ 
/*     */   public synchronized int getInt(String name, int i) {
/* 217 */     return getIntPreference(name, i);
/*     */   }
/*     */ 
/*     */   public synchronized double getDouble(String name, double d) {
/* 221 */     return getDoublePreference(name, d);
/*     */   }
/*     */ 
/*     */   public synchronized long getLong(String name, long d) {
/* 225 */     return getLongPreference(name, d);
/*     */   }
/*     */ 
/*     */   public synchronized String get(String name, String def) {
/* 229 */     return getPreference(name, def);
/*     */   }
/*     */ 
/*     */   public synchronized void put(String key, String val) {
/* 233 */     setPreference(key, val);
/*     */   }
/*     */ 
/*     */   public synchronized void putDouble(String key, double val) {
/* 237 */     setPreference(key, val);
/*     */   }
/*     */ 
/*     */   public synchronized void putInt(String key, int val) {
/* 241 */     setPreference(key, val);
/*     */   }
/*     */ 
/*     */   public synchronized void putBoolean(String key, boolean val) {
/* 245 */     setPreference(key, val);
/*     */   }
/*     */ 
/*     */   public synchronized void putLong(String key, long val)
/*     */   {
/* 250 */     setPreference(key, val);
/*     */   }
/*     */ 
/*     */   public synchronized boolean getBooleanPreference(String name, boolean def)
/*     */   {
/* 263 */     String str = getPreference(name);
/* 264 */     if (str == null) return def;
/* 265 */     return str.equals("true");
/*     */   }
/*     */ 
/*     */   public synchronized void setPreference(String name, String val)
/*     */   {
/* 274 */     this.prefs.put(name, val);
/* 275 */     this.dirty = true;
/* 276 */     firePreferenceChangeEvent(name, val);
/*     */   }
/*     */ 
/*     */   public synchronized void setPreference(String name, int val)
/*     */   {
/* 286 */     setPreference(name, Integer.toString(val));
/* 287 */     this.dirty = true;
/*     */   }
/*     */ 
/*     */   public synchronized void setPreference(String name, long val)
/*     */   {
/* 296 */     setPreference(name, Long.toString(val));
/* 297 */     this.dirty = true;
/*     */   }
/*     */ 
/*     */   public synchronized void setPreference(String name, boolean val)
/*     */   {
/* 306 */     setPreference(name, Boolean.toString(val));
/* 307 */     this.dirty = true;
/*     */   }
/*     */ 
/*     */   public synchronized void setPreference(String name, double val)
/*     */   {
/* 316 */     setPreference(name, Double.toString(val));
/* 317 */     this.dirty = true;
/*     */   }
/*     */ 
/*     */   public synchronized void savePreferences(String fName)
/*     */   {
/* 324 */     this.file = new File(fName);
/* 325 */     savePreferences();
/*     */   }
/*     */ 
/*     */   public synchronized void savePreferences()
/*     */   {
/*     */     try
/*     */     {
/* 333 */       RandomAccessFile f = new RandomAccessFile(this.file, "rw");
/* 334 */       Enumeration e = this.prefs.keys();
/* 335 */       while (e.hasMoreElements()) {
/* 336 */         String k = (String)e.nextElement();
/* 337 */         String s = k + "=" + escapeString((String)this.prefs.get(k)) + "\n";
/* 338 */         f.writeBytes(s);
/*     */       }
/* 340 */       while (f.getFilePointer() < f.length()) f.write(10);
/* 341 */       f.close();
/*     */     } catch (IOException e) {
/* 343 */       e.printStackTrace();
/*     */     }
/* 345 */     this.dirty = false;
/*     */   }
/*     */ 
/*     */   public synchronized void saveSortedPreferences()
/*     */   {
/*     */     try
/*     */     {
/* 353 */       RandomAccessFile f = new RandomAccessFile(this.file, "rw");
/* 354 */       SortedSet s2 = new TreeSet(this.prefs.keySet());
/* 355 */       Iterator e = s2.iterator();
/* 356 */       while (e.hasNext()) {
/* 357 */         String k = (String)e.next();
/* 358 */         String s = k + "=" + escapeString((String)this.prefs.get(k)) + "\n";
/* 359 */         f.writeBytes(s);
/*     */       }
/* 361 */       while (f.getFilePointer() < f.length()) f.write(10);
/* 362 */       f.close();
/*     */     } catch (IOException e) {
/* 364 */       e.printStackTrace();
/*     */     }
/* 366 */     this.dirty = false;
/*     */   }
/*     */ 
/*     */   public String toString()
/*     */   {
/* 371 */     return toString('\n');
/*     */   }
/*     */ 
/*     */   public String toString(char separator) {
/* 375 */     StringBuffer sb = new StringBuffer();
/* 376 */     Enumeration e = this.prefs.keys();
/* 377 */     while (e.hasMoreElements()) {
/* 378 */       String k = (String)e.nextElement();
/* 379 */       sb.append(k);
/* 380 */       sb.append('=');
/* 381 */       sb.append((String)this.prefs.get(k));
/* 382 */       sb.append(separator);
/*     */     }
/* 384 */     return sb.toString();
/*     */   }
/*     */ 
/*     */   public synchronized void loadPreferences(File file)
/*     */   {
/*     */     try
/*     */     {
/* 393 */       RandomAccessFile f = new RandomAccessFile(file, "r");
/* 394 */       while (f.getFilePointer() < f.length()) {
/* 395 */         String s = f.readLine();
/* 396 */         parsePrefLine(s);
/*     */       }
/* 398 */       f.close();
/*     */     }
/*     */     catch (FileNotFoundException localFileNotFoundException) {
/*     */     }
/*     */     catch (IOException localIOException) {
/*     */     }
/* 404 */     this.dirty = false;
/*     */   }
/*     */ 
/*     */   protected String escapeString(String s)
/*     */   {
/* 414 */     return s;
/*     */   }
/*     */ 
/*     */   protected String unescapeString(String s)
/*     */   {
/* 422 */     return s;
/*     */   }
/*     */ 
/*     */   public static String munkString(String s)
/*     */   {
/* 430 */     StringBuffer sb = new StringBuffer();
/* 431 */     for (int i = 0; i < s.length(); i++) {
/* 432 */       char c = s.charAt(i);
/* 433 */       if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || 
/* 434 */         ((c >= '0') && (c <= '9')) || (c == '.') || (c == '-')) {
/* 435 */         sb.append(c);
/*     */       } else {
/* 437 */         sb.append('{');
/* 438 */         sb.append(Integer.toString(c));
/* 439 */         sb.append('}');
/*     */       }
/*     */     }
/* 442 */     return sb.toString();
/*     */   }
/*     */ 
/*     */   public static String unmunkString(String s)
/*     */   {
/* 449 */     if (s == null) return null;
/* 450 */     StringBuffer sb = new StringBuffer();
/* 451 */     for (int i = 0; i < s.length(); i++) {
/* 452 */       char c = s.charAt(i);
/* 453 */       if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || 
/* 454 */         ((c >= '0') && (c <= '9')) || (c == '.') || (c == '-') || 
/* 455 */         (c == ' ') || (c == '<') || (c == '>') || (c == '/') || 
/* 456 */         (c == '&') || (c == ';') || (c == '?') || (c == '\'') || (c == '"')) {
/* 457 */         sb.append(c);
/* 458 */       } else if (c == '{') {
/* 459 */         StringBuffer cb = new StringBuffer();
/* 460 */         while (c != '}') {
/* 461 */           c = s.charAt(++i);
/* 462 */           if (c != '}') cb.append(c);
/*     */         }
/* 464 */         c = (char)Integer.decode(cb.toString()).intValue();
/* 465 */         sb.append(c);
/*     */       }
/*     */     }
/* 468 */     return sb.toString();
/*     */   }
/*     */ 
/*     */   public String getFileName() {
/* 472 */     if (this.file != null) {
/* 473 */       return this.file.getAbsolutePath();
/*     */     }
/* 475 */     return null;
/*     */   }
/*     */ 
/*     */   public File getFile()
/*     */   {
/* 480 */     return this.file;
/*     */   }
/*     */ 
/*     */   public void removePreference(String name) {
/* 484 */     this.prefs.remove(name);
/* 485 */     this.dirty = true;
/*     */   }
/*     */ 
/*     */   public boolean isDirty() {
/* 489 */     return this.dirty;
/*     */   }
/*     */ 
/*     */   public void setDirty(boolean val) {
/* 493 */     this.dirty = val;
/*     */   }
/*     */ 
/*     */   private synchronized Vector getListeners() {
/* 497 */     if (this.listeners == null) {
/* 498 */       this.listeners = new Vector();
/*     */     }
/* 500 */     return this.listeners;
/*     */   }
/*     */ 
/*     */   public synchronized void addPreferenceChangeListener(PreferenceChangeListener l) {
/* 504 */     getListeners().add(l);
/*     */   }
/*     */ 
/*     */   public synchronized void removePreferenceChangeListener(PreferenceChangeListener l) {
/* 508 */     getListeners().remove(l);
/*     */   }
/*     */ 
/*     */   public synchronized void firePreferenceChangeEvent(String key, String val) {
/* 512 */     if (this.listeners != null) {
/* 513 */       PreferenceChangeEvent event = new PreferenceChangeEvent(this, key, val);
/* 514 */       for (int i = 0; i < this.listeners.size(); i++)
/* 515 */         ((PreferenceChangeListener)this.listeners.get(i)).preferenceChange(event);
/*     */     }
/*     */   }
/*     */ 
/*     */   public boolean hasPreference(String key)
/*     */   {
/* 526 */     return this.prefs.containsKey(key);
/*     */   }
/*     */ }

/* Location:           C:\Users\Ash\Downloads\Meerkat-API-2.5 (1)\Meerkat-API\meerkat-api.jar
 * Qualified Name:     com.biotools.meerkat.util.Preferences
 * JD-Core Version:    0.6.2
 */