/*     */package com.biotools.meerkat;

/*     */
/*     */import com.biotools.util.Randomizer;

/*     */
/*     */public class Deck
/*     */
{
	/*     */public static final int		NUM_CARDS			= 52;
	/*  22 */private transient Randomizer	r					= Randomizer.getRandomizer();
	/*     */
	boolean									assertionsDisabled	= false;
	/*  24 */private Card[]				gCards				= new Card[52];
	/*  25 */private int[]					cardMap				= new int[52];
	/*     */private int					position;

	/*     */
	/*     */public Deck()
	/*     */
	{
		/*  32 */this.position = 0;
		/*  33 */for (int i = 0; i < 52; i++)
		{
			/*  34 */this.gCards[i] = new Card(i);
			/*  35 */this.cardMap[i] = i;
			/*     */}
		/*     */}

	/*     */
	/*     */public void copy(Deck d)
	{
		/*  40 */System.arraycopy(d.gCards, 0, this.gCards, 0, 52);
		/*  41 */System.arraycopy(d.cardMap, 0, this.cardMap, 0, 52);
		/*  42 */this.position = d.position;
		/*     */}

	/*     */
	/*     */public Deck(long seed)
	/*     */
	{
		/*  55 */this();
		/*  56 */setSeed(seed);
		/*     */}

	/*     */
	/*     */public void setSeed(long seed)
	/*     */
	{
		/*  66 */if (seed != 0L)
		{
			/*  67 */this.r = new Randomizer();
			/*  68 */this.r.setSeed(seed);
			/*     */}
		/*     */}

	/*     */
	/*     */public void reset()
	/*     */
	{
		/*  77 */this.position = 0;
		/*     */}

	/*     */
	/*     */public void shuffle()
	/*     */
	{
		/*  86 */for (int i = 0; i < 52; i++)
		{
			/*  87 */int j = i + this.r.nextInt(52 - i);
			/*  88 */Card tempCard = this.gCards[j];
			/*  89 */this.gCards[j] = this.gCards[i];
			/*  90 */this.gCards[i] = tempCard;
			/*  91 */this.cardMap[this.gCards[i].getIndex()] = i;
			/*  92 */this.cardMap[this.gCards[j].getIndex()] = j;
			/*     */}
		/*  94 */this.position = 0;
		/*     */}

	/*     */
	/*     */public Card deal()
	/*     */
	{
		/* 103 */return this.position < 52 ? this.gCards[(this.position++)] : null;
		/*     */}

	/*     */
	/*     */public Card dealCard()
	/*     */
	{
		/* 112 */return extractRandomCard();
		/*     */}

	/*     */
	/*     */public int findCard(Card c)
	/*     */
	{
		/* 119 */return this.cardMap[c.getIndex()];
		/*     */}

	/*     */
	/*     */public int findCard(int c_index)
	/*     */
	{
		/* 127 */return this.cardMap[c_index];
		/*     */}

	/*     */
	/*     */public int findDiscard(Card c)
	{
		/* 131 */return findDiscard(c.getIndex());
		/*     */}

	/*     */
	/*     */public int findDiscard(int c_index)
	{
		/* 135 */return this.cardMap[c_index];
		/*     */}

	/*     */
	/*     */public boolean inDeck(Card c)
	/*     */
	{
		/* 144 */return this.cardMap[c.getIndex()] >= this.position;
		/*     */}

	/*     */
	/*     */public void extractHand(Hand h)
	/*     */
	{
		/* 151 */for (int i = 1; i <= h.size(); i++)
			/* 152 */if (h.getCardIndex(i) >= 0)
				/* 153 */extractCard(h.getCardIndex(i));
		/*     */}

	/*     */
	/*     */public void extractCard(int c_index)
	/*     */
	{
		/* 164 */int i = findCard(c_index);
		/* 165 */if (i != -1)
		{
			/* 166 */Card t = this.gCards[i];
			/* 167 */this.gCards[i] = this.gCards[this.position];
			/* 168 */this.gCards[this.position] = t;
			/*     */
			/* 170 */this.cardMap[this.gCards[i].getIndex()] = i;
			/* 171 */this.cardMap[t.getIndex()] = this.position;
			/*     */
			/* 173 */this.position += 1;
			/*     */}
		/* 175 */else if (!assertionsDisabled)
		{
			throw new AssertionError();
		}
		/*     */
		/*     */}

	/*     */
	/*     */public void extractCard(Card c)
	/*     */
	{
		/* 185 */extractCard(c.getIndex());
		/*     */}

	/*     */
	/*     */public Card extractRandomCard()
	/*     */
	{
		/* 192 */int pos = this.position + this.r.nextInt(52 - this.position);
		/* 193 */Card c = this.gCards[pos];
		/* 194 */this.gCards[pos] = this.gCards[this.position];
		/* 195 */this.gCards[this.position] = c;
		/*     */
		/* 197 */this.cardMap[this.gCards[pos].getIndex()] = pos;
		/* 198 */this.cardMap[c.getIndex()] = this.position;
		/*     */
		/* 200 */this.position += 1;
		/* 201 */return c;
		/*     */}

	/*     */
	/*     */public Card pickRandomCard()
	/*     */
	{
		/* 208 */return this.gCards[(this.position + this.r.nextInt(52 - this.position))];
		/*     */}

	/*     */
	/*     */public void replaceCard(Card c)
	/*     */
	{
		/* 215 */replaceCard(c.getIndex());
		/*     */}

	/*     */
	/*     */public void replaceCard(int c_index)
	/*     */
	{
		/* 223 */int i = findDiscard(c_index);
		/* 224 */if (i != -1)
		{
			/* 225 */this.position -= 1;
			/* 226 */Card t = this.gCards[i];
			/* 227 */this.gCards[i] = this.gCards[this.position];
			/* 228 */this.gCards[this.position] = t;
			/*     */
			/* 230 */this.cardMap[this.gCards[i].getIndex()] = i;
			/* 231 */this.cardMap[t.getIndex()] = this.position;
			/*     */}
		/*     */}

	/*     */
	/*     */public int getTopCardIndex()
	/*     */
	{
		/* 241 */return this.position;
		/*     */}

	/*     */
	/*     */public Card getTopCard()
	/*     */
	{
		/* 249 */return getCard(this.position);
		/*     */}

	/*     */
	/*     */public int cardsLeft()
	/*     */
	{
		/* 257 */return 52 - this.position;
		/*     */}

	/*     */
	/*     */public final Card getCard(int i)
	/*     */
	{
		/* 268 */return this.gCards[i];
		/*     */}

	/*     */
	/*     */public String toString()
	{
		/* 272 */StringBuffer s = new StringBuffer();
		/* 273 */s.append("* ");
		/* 274 */for (int i = 0; i < this.position; i++)
		{
			/* 275 */s.append(this.gCards[i].toString() + " ");
			/*     */}
		/* 277 */s.append("\n* ");
		/* 278 */for (int i = this.position; i < 52; i++)
		{
			/* 279 */s.append(this.gCards[i].toString() + " ");
			/*     */}
		/* 281 */return s.toString();
		/*     */}
	/*     */
}

/* Location:           C:\Users\Ash\Downloads\Meerkat-API-2.5 (1)\Meerkat-API\meerkat-api.jar
 * Qualified Name:     com.biotools.meerkat.Deck
 * JD-Core Version:    0.6.2
 */