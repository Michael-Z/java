/*     */ package com.biotools.meerkat;
/*     */ 
/*     */ import java.text.DecimalFormat;
/*     */ 
/*     */ public class Action
/*     */ {
/*     */   public static final int INVALID = -1;
/*     */   public static final int FOLD = 0;
/*     */   public static final int CHECK = 1;
/*     */   public static final int CALL = 2;
/*     */   public static final int BET = 3;
/*     */   public static final int RAISE = 4;
/*     */   public static final int SMALL_BLIND = 5;
/*     */   public static final int BIG_BLIND = 6;
/*     */   public static final int POST_BLIND = 7;
/*     */   public static final int ALLIN_PASS = 8;
/*     */   public static final int MUCK = 9;
/*     */   public static final int POST_ANTE = 10;
/*     */   public static final int SIT_OUT = 11;
/*     */   public static final int POST_DEAD_BLIND = 12;
/*  31 */   private int type = -1;
/*  32 */   private double amount = 0.0D;
/*  33 */   private double toCall = 0.0D;
/*     */ 
/* 337 */   private static final DecimalFormat dollarsCents = new DecimalFormat(Messages.getString("Action.DollarFormatWithCents"));
/* 338 */   private static final DecimalFormat dollars = new DecimalFormat(Messages.getString("Action.DollarFormat"));
/*     */ 
/*     */   public Action(int type, double toCall, double amount)
/*     */   {
/*  36 */     this.type = type;
/*  37 */     this.amount = roundToCents(amount);
/*  38 */     this.toCall = roundToCents(toCall);
/*     */   }
/*     */ 
/*     */   public boolean equivalent(Action a) {
/*  42 */     return (this.type == a.type) && (this.amount == a.amount) && (this.toCall == a.toCall);
/*     */   }
/*     */ 
/*     */   public double getAmount() {
/*  46 */     return this.amount;
/*     */   }
/*     */ 
/*     */   public double getToCall() {
/*  50 */     return this.toCall;
/*     */   }
/*     */ 
/*     */   public int getType() {
/*  54 */     return this.type;
/*     */   }
/*     */ 
/*     */   public static Action postAnte(double toPost) {
/*  58 */     return new Action(10, 0.0D, toPost);
/*     */   }
/*     */ 
/*     */   public static Action sitout() {
/*  62 */     return new Action(11, 0.0D, 0.0D);
/*     */   }
/*     */ 
/*     */   public static Action postBlindAction(double toPost) {
/*  66 */     return new Action(7, 0.0D, toPost);
/*     */   }
/*     */ 
/*     */   public static Action postDeadBlindAction(double toPost) {
/*  70 */     return new Action(12, 0.0D, toPost);
/*     */   }
/*     */ 
/*     */   public static Action smallBlindAction(double toPost) {
/*  74 */     return new Action(5, 0.0D, toPost);
/*     */   }
/*     */ 
/*     */   public static Action bigBlindAction(double toPost) {
/*  78 */     return new Action(6, 0.0D, toPost);
/*     */   }
/*     */ 
/*     */   public static Action foldAction(GameInfo gi) {
/*  82 */     return foldAction(gi.getAmountToCall(gi.getCurrentPlayerSeat()));
/*     */   }
/*     */ 
/*     */   public static Action foldAction(double toCall) {
/*  86 */     return new Action(0, toCall, 0.0D);
/*     */   }
/*     */ 
/*     */   public static Action checkOrFoldAction(GameInfo gi) {
/*  90 */     return checkOrFoldAction(gi.getAmountToCall(gi.getCurrentPlayerSeat()));
/*     */   }
/*     */ 
/*     */   public static Action checkOrFoldAction(double toCall) {
/*  94 */     if (toCall > 0.0D) {
/*  95 */       return new Action(0, toCall, 0.0D);
/*     */     }
/*  97 */     return checkAction();
/*     */   }
/*     */ 
/*     */   public static Action muckAction()
/*     */   {
/* 102 */     return new Action(9, 0.0D, 0.0D);
/*     */   }
/*     */ 
/*     */   public static Action checkAction() {
/* 106 */     return new Action(1, 0.0D, 0.0D);
/*     */   }
/*     */ 
/*     */   public static Action callAction(GameInfo gi) {
/* 110 */     return callAction(gi.getAmountToCall(gi.getCurrentPlayerSeat()));
/*     */   }
/*     */ 
/*     */   public static Action callAction(double toCall) {
/* 114 */     if (toCall == 0.0D) {
/* 115 */       return checkAction();
/*     */     }
/* 117 */     return new Action(2, toCall, 0.0D);
/*     */   }
/*     */ 
/*     */   public static Action betAction(GameInfo gi) {
/* 121 */     return betAction(gi.getMinRaise());
/*     */   }
/*     */ 
/*     */   public static Action betAction(double amountToRaise) {
/* 125 */     return new Action(3, 0.0D, amountToRaise);
/*     */   }
/*     */ 
/*     */   public static Action raiseAction(GameInfo gi)
/*     */   {
/* 130 */     return raiseAction(gi, gi.getMinRaise());
/*     */   }
/*     */ 
/*     */   public static Action raiseAction(GameInfo gi, double amountToRaise) {
/* 134 */     return raiseAction(gi.getAmountToCall(gi.getCurrentPlayerSeat()), amountToRaise);
/*     */   }
/*     */ 
/*     */   public static Action raiseAction(double toCall, double amountToRaise) {
/* 138 */     if (amountToRaise <= 0.0D) {
/* 139 */       return callAction(toCall);
/*     */     }
/* 141 */     if (toCall == 0.0D) {
/* 142 */       return betAction(amountToRaise);
/*     */     }
/* 144 */     return new Action(4, toCall, amountToRaise);
/*     */   }
/*     */ 
/*     */   public static Action allInPassAction() {
/* 148 */     return new Action(8, 0.0D, 0.0D);
/*     */   }
/*     */ 
/*     */   public boolean isFold() {
/* 152 */     return this.type == 0;
/*     */   }
/*     */ 
/*     */   public boolean isFoldOrMuck() {
/* 156 */     return (this.type == 0) || (this.type == 9);
/*     */   }
/*     */ 
/*     */   public boolean isCheck() {
/* 160 */     return this.type == 1;
/*     */   }
/*     */ 
/*     */   public boolean isCall() {
/* 164 */     return this.type == 2;
/*     */   }
/*     */ 
/*     */   public boolean isCheckOrCall() {
/* 168 */     return (this.type == 2) || (this.type == 1);
/*     */   }
/*     */ 
/*     */   public boolean isBet() {
/* 172 */     return this.type == 3;
/*     */   }
/*     */ 
/*     */   public boolean isRaise() {
/* 176 */     return this.type == 4;
/*     */   }
/*     */ 
/*     */   public boolean isBetOrRaise() {
/* 180 */     return (this.type == 3) || (this.type == 4);
/*     */   }
/*     */ 
/*     */   public boolean isBlind() {
/* 184 */     return (this.type == 5) || (this.type == 6) || (this.type == 7) || (this.type == 12);
/*     */   }
/*     */ 
/*     */   public boolean isPost() {
/* 188 */     return (this.type == 7) || (this.type == 12);
/*     */   }
/*     */ 
/*     */   public boolean isPostDeadBlind() {
/* 192 */     return this.type == 12;
/*     */   }
/*     */ 
/*     */   public boolean isSmallBlind() {
/* 196 */     return this.type == 5;
/*     */   }
/*     */ 
/*     */   public boolean isBigBlind() {
/* 200 */     return this.type == 6;
/*     */   }
/*     */ 
/*     */   public boolean isAllInPass() {
/* 204 */     return this.type == 8;
/*     */   }
/*     */ 
/*     */   public boolean isSitout()
/*     */   {
/* 209 */     return this.type == 11;
/*     */   }
/*     */ 
/*     */   public boolean isMuck()
/*     */   {
/* 214 */     return this.type == 9;
/*     */   }
/*     */ 
/*     */   public boolean isAnte() {
/* 218 */     return this.type == 10;
/*     */   }
/*     */ 
/*     */   public int getActionIndex()
/*     */   {
/* 226 */     switch (this.type) { case 0:
/* 227 */       return 0;
/*     */     case 1:
/* 228 */       return 1;
/*     */     case 2:
/* 229 */       return 1;
/*     */     case 3:
/* 230 */       return 2;
/*     */     case 4:
/* 231 */       return 2;
/*     */     }
/* 233 */     return -1;
/*     */   }
/*     */ 
/*     */   public static Action getAction(int a, double toCall, double amount)
/*     */   {
/* 245 */     switch (a) {
/*     */     case 0:
/* 247 */       return checkOrFoldAction(toCall);
/*     */     case 1:
/* 249 */       return callAction(toCall);
/*     */     case 2:
/* 251 */       return raiseAction(toCall, amount);
/*     */     }
/* 253 */     return null;
/*     */   }
/*     */ 
/*     */   public String toString()
/*     */   {
/* 264 */     Object[] msgArgsAmount = { formatCash(this.amount) };
/*     */ 
/* 266 */     switch (this.type) {
/*     */     case 5:
/* 268 */       return Messages.getString("Action.BlindPattern", msgArgsAmount);
/*     */     case 6:
/* 270 */       return Messages.getString("Action.BlindPattern", msgArgsAmount);
/*     */     case 7:
/* 272 */       return Messages.getString("Action.PostPattern", msgArgsAmount);
/*     */     case 12:
/* 274 */       return Messages.getString("Action.PostDeadPattern", msgArgsAmount);
/*     */     case 10:
/* 276 */       return Messages.getString("Action.AntePattern", msgArgsAmount);
/*     */     case 0:
/* 278 */       return Messages.getString("Action.Fold");
/*     */     case 9:
/* 280 */       return Messages.getString("Action.Muck");
/*     */     case 1:
/* 282 */       return Messages.getString("Action.Check");
/*     */     case 2:
/* 284 */       Object[] msgArgs = { formatCash(this.toCall) };
/* 285 */       return Messages.getString("Action.CallPattern", msgArgs);
/*     */     case 3:
/* 287 */       return Messages.getString("Action.BetPattern", msgArgsAmount);
/*     */     case 4:
/* 289 */       return Messages.getString("Action.RaisePattern", msgArgsAmount);
/*     */     case 8:
/* 291 */       return Messages.getString("Action.AllIn");
/*     */     case 11:
/* 293 */       return Messages.getString("Action.SitsOut");
/*     */     }
/* 295 */     return Messages.getString("Action.12");
/*     */   }
/*     */ 
/*     */   public String toString2()
/*     */   {
/* 303 */     Object[] msgArgsAmount = { formatCash(this.amount) };
/* 304 */     switch (this.type) {
/*     */     case 5:
/* 306 */       return Messages.getString("Action.SmallBlindLongPattern", msgArgsAmount);
/*     */     case 6:
/* 308 */       return Messages.getString("Action.BigBlindLongPattern", msgArgsAmount);
/*     */     case 7:
/* 310 */       return Messages.getString("Action.BlindLongPattern", msgArgsAmount);
/*     */     case 12:
/* 312 */       return Messages.getString("Action.PostDeadLongPattern", msgArgsAmount);
/*     */     case 10:
/* 314 */       return Messages.getString("Action.AnteLongPattern", msgArgsAmount);
/*     */     case 0:
/* 316 */       return Messages.getString("Action.FoldLong");
/*     */     case 9:
/* 318 */       return Messages.getString("Action.MuckLong");
/*     */     case 1:
/* 320 */       return Messages.getString("Action.CheckLong");
/*     */     case 2:
/* 322 */       Object[] msgArgs = { formatCash(this.toCall) };
/* 323 */       return Messages.getString("Action.CallLongPattern", msgArgs);
/*     */     case 3:
/* 325 */       return Messages.getString("Action.BetLongPattern", msgArgsAmount);
/*     */     case 4:
/* 327 */       return Messages.getString("Action.RaiseLongPattern", msgArgsAmount);
/*     */     case 8:
/* 329 */       return Messages.getString("Action.AllInLong");
/*     */     case 11:
/* 331 */       return Messages.getString("Action.SitOutLong");
/*     */     }
/* 333 */     return "";
/*     */   }
/*     */ 
/*     */   public static String formatCash(double value)
/*     */   {
/* 342 */     if (value == (int)value) {
/* 343 */       return dollars.format(value);
/*     */     }
/* 345 */     return dollarsCents.format(value);
/*     */   }
/*     */ 
/*     */   public static String formatCashFull(double value)
/*     */   {
/* 350 */     return dollarsCents.format(value);
/*     */   }
/*     */ 
/*     */   public boolean isVoluntary()
/*     */   {
/* 355 */     return (!isAnte()) && (!isAllInPass()) && (!isBlind());
/*     */   }
/*     */ 
/*     */   private double roundToCents(double v) {
/* 359 */     return Math.round(v * 100.0D) / 100.0D;
/*     */   }
/*     */ }

/* Location:           C:\Users\Ash\Downloads\Meerkat-API-2.5 (1)\Meerkat-API\meerkat-api.jar
 * Qualified Name:     com.biotools.meerkat.Action
 * JD-Core Version:    0.6.2
 */