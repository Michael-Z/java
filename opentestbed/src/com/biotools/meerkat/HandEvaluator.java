/*     */package com.biotools.meerkat;

/*     */
/*     */import com.biotools.meerkat.util.NChoose2IntTable;

/*     */
/*     */public class HandEvaluator
/*     */
{
	/*     */private static HandEval	eval;

	/*     */
	/*     */public static final int rankHand(Hand h)
	/*     */
	{
		/*  22 */return eval.rankHand(h);
		/*     */}

	/*     */
	/*     */public static final int rankHand7(Hand h)
	/*     */
	{
		/*  35 */return eval.rankHand7(h);
		/*     */}

	/*     */
	/*     */public static final int rankHand6(Hand h)
	/*     */
	{
		/*  48 */return eval.rankHand6(h);
		/*     */}

	/*     */
	/*     */public static final int rankHand5(Hand h)
	/*     */
	{
		/*  61 */return eval.rankHand5(h);
		/*     */}

	/*     */
	/*     */public static int rankHand(int c1, int c2, Hand h)
	/*     */
	{
		/*  74 */h.addCard(c1);
		/*  75 */h.addCard(c2);
		/*  76 */int rank = eval.rankHand(h);
		/*  77 */h.removeCard();
		/*  78 */h.removeCard();
		/*  79 */return rank;
		/*     */}

	/*     */
	/*     */public static int rankHand(Card c1, Card c2, Hand h)
	/*     */
	{
		/*  92 */h.addCard(c1);
		/*  93 */h.addCard(c2);
		/*  94 */int rank = eval.rankHand(h);
		/*  95 */h.removeCard();
		/*  96 */h.removeCard();
		/*  97 */return rank;
		/*     */}

	/*     */
	/*     */public static int compareHands(Hand h1, Hand h2)
	/*     */
	{
		/* 111 */int r1 = rankHand(h1);
		/* 112 */int r2 = rankHand(h2);
		/* 113 */if (r1 > r2)
			return 1;
		/* 114 */if (r1 < r2)
			return 2;
		/* 115 */return 0;
		/*     */}

	/*     */
	/*     */public static int compareHands(int rank1, Hand h2)
	/*     */
	{
		/* 128 */int r1 = rank1;
		/* 129 */int r2 = rankHand(h2);
		/* 130 */if (r1 > r2)
			return 1;
		/* 131 */if (r1 < r2)
			return 2;
		/* 132 */return 0;
		/*     */}

	/*     */
	/*     */public static NChoose2IntTable getRanks(Hand board)
	/*     */
	{
		/* 141 */Hand myhand = new Hand(board);
		/* 142 */NChoose2IntTable rc = new NChoose2IntTable(52);
		/*     */
		/* 144 */Deck d = new Deck();
		/* 145 */d.extractHand(board);
		/*     */
		/* 148 */for (int i = d.getTopCardIndex(); i < 52; i++)
		{
			/* 149 */myhand.addCard(d.getCard(i));
			/* 150 */int n1 = d.getCard(i).getIndex();
			/* 151 */for (int j = i + 1; j < 52; j++)
			{
				/* 152 */myhand.addCard(d.getCard(j));
				/* 153 */int n2 = d.getCard(j).getIndex();
				/* 154 */rc.set(n1, n2, rankHand(myhand));
				/* 155 */myhand.removeCard();
				/*     */}
			/* 157 */myhand.removeCard();
			/*     */}
		/* 159 */return rc;
		/*     */}

	/*     */
	/*     */public static double handRank(Card c1, Card c2, Hand h, int np)
	/*     */
	{
		/* 181 */double HR = handRank(c1, c2, h);
		/* 182 */double H = HR;
		/* 183 */for (int j = 0; j < np - 1; j++)
			/* 184 */H *= HR;
		/* 185 */return H;
		/*     */}

	/*     */
	/*     */public static double handRank(Card c1, Card c2, Hand h)
	/*     */
	{
		/* 202 */Hand myHand = new Hand(h);
		/* 203 */Hand xxHand = new Hand(h);
		/* 204 */myHand.addCard(c1);
		/* 205 */myHand.addCard(c2);
		/* 206 */int myRank = rankHand(myHand);
		/*     */
		/* 208 */Deck d = new Deck();
		/* 209 */int good = 0;
		/* 210 */int bad = 0;
		/* 211 */int tied = 0;
		/*     */
		/* 214 */d.reset();
		/* 215 */d.extractCard(c1);
		/* 216 */d.extractCard(c2);
		/* 217 */d.extractHand(h);
		/*     */
		/* 220 */for (int i = d.getTopCardIndex(); i < 52; i++)
		{
			/* 221 */xxHand.addCard(d.getCard(i));
			/* 222 */for (int j = i + 1; j < 52; j++)
			{
				/* 223 */xxHand.addCard(d.getCard(j));
				/* 224 */int v = compareHands(myRank, xxHand);
				/* 225 */if (v == 1)
					/* 226 */good++;
				/* 227 */else if (v == 2)
					/* 228 */bad++;
				/*     */else
					/* 230 */tied++;
				/* 231 */xxHand.removeCard();
				/*     */}
			/* 233 */xxHand.removeCard();
			/*     */}
		/*     */
		/* 236 */return (good + tied / 2.0D) / (good +
		/* 237 */bad + tied);
		/*     */}

	/*     */
	/*     */public static double handRank(Card c1, Card c2, NChoose2IntTable rankCache, Deck dk)
	/*     */
	{
		/* 258 */int c1i = c1.getIndex();
		/* 259 */int c2i = c2.getIndex();

		if (null == rankCache)
		{
			Hand h = new Hand();
			h.addCard(c1);
			h.addCard(c2);
			rankCache = getRanks(h);
		}

		/* 260 */int myRank = rankCache.get(c1i, c2i);
		/* 261 */int good = 0;
		/* 262 */int bad = 0;
		/* 263 */int tied = 0;
		/*     */
		/* 266 */for (int i = dk.getTopCardIndex(); i < 52; i++)
		{
			/* 267 */int n1 = dk.getCard(i).getIndex();
			/* 268 */if ((n1 != c1i) && (n1 != c2i))
			{
				/* 269 */for (int j = i + 1; j < 52; j++)
				{
					/* 270 */int n2 = dk.getCard(j).getIndex();
					/* 271 */if ((n2 != c1i) && (n2 != c2i))
					{
						/* 272 */int opRank = rankCache.get(n1, n2);
						/* 273 */if (myRank > opRank)
							/* 274 */good++;
						/* 275 */else if (myRank < opRank)
							/* 276 */bad++;
						/*     */else
						{
							/* 278 */tied++;
							/*     */}
						/*     */}
					/*     */}
				/*     */}
			/*     */}
		/* 284 */return (good + tied / 2.0D) / (
		/* 285 */good + bad + tied);
		/*     */}

	/*     */
	/*     */public static final boolean isTheNuts(Card c1, Card c2, Hand board, NChoose2IntTable rankCache)
	/*     */
	{
		/* 296 */Deck dk = new Deck();
		/* 297 */dk.extractCard(c1);
		/* 298 */dk.extractCard(c2);
		/* 299 */dk.extractHand(board);
		/* 300 */int c1i = c1.getIndex();
		/* 301 */int c2i = c2.getIndex();

		if (null == rankCache)
			rankCache = getRanks(board);

		int myRank = rankCache.get(c1i, c2i);
		/* 303 */for (int i = dk.getTopCardIndex(); i < 52; i++)
		{
			/* 304 */int n1 = dk.getCard(i).getIndex();
			/* 305 */if ((n1 != c1i) && (n1 != c2i))
			{
				/* 306 */for (int j = i + 1; j < 52; j++)
				{
					/* 307 */int n2 = dk.getCard(j).getIndex();
					/* 308 */if ((n2 != c1i) && (n2 != c2i) &&
					/* 309 */(myRank < rankCache.get(n1, n2)))
					{
						/* 310 */return false;
						/*     */}
					/*     */}
				/*     */}
			/*     */}
		/*     */
		/* 316 */return true;
		/*     */}

	/*     */
	/*     */public static HandEval getHandEval()
	/*     */
	{
		/* 324 */return eval;
		/*     */}

	/*     */
	/*     */public static void setHandEval(HandEval he)
	/*     */
	{
		/* 332 */eval = he;
		/*     */}
	/*     */
}

/* Location:           C:\Users\Ash\Downloads\Meerkat-API-2.5 (1)\Meerkat-API\meerkat-api.jar
 * Qualified Name:     com.biotools.meerkat.HandEvaluator
 * JD-Core Version:    0.6.2
 */