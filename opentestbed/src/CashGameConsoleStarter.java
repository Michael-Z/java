import game.CashGameDescription;
import game.GameIDGenerator;
import game.GameRunner;
import game.HandHistoryWriter;
import game.TableSeater;
import game.deck.DeckFactory;
import game.deck.SerializedDeck;
import game.stats.BankrollGraphUI;

import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import bots.BotRepository;

import com.biotools.meerkat.GameObserver;
import com.biotools.poker.PokerAppLauncher;

/**
 * This class starts a simulation on the console and writes a handhistory-file
 * to the ./data directory
 */

public class CashGameConsoleStarter
{

	public static void main(String[] args) throws Exception
	{
		// number of games
		int numGames = 100000;
		// if to permute seats to reduce variance
		boolean permuteSeats = true;
		// four Bots fight against each other
		// valid BotNames can be obtained from the botRepository
		String[] botNames = new String[] { "AA/Bigfoot", //
				//"RandomBot/RandomBot", //
				"DemoBot/SimpleBot", //
		//"FellOmen_2/FellOmen_2", //
		//"ReflexBot/ReflexBot", //
		//"Terrapin/Terrapin", // hmmm
		//"MCTSBot/MCTSBot", //
		//"SmarterBot/SmarterBot", //

		/////////////
		// PA BOTS //
		/////////////
		//"AveryBot/AveryBot", // poker.N.K.getAction -> poker.N.K.� -> poker.N.K.� -> poker.D.E.A(null)
		//"Jagbot/Jagbot",  // poker.N.U.getAction -> poker.N.U.� -> poker.N.U.C -> poker.D.E.A(null)
		//"Jambot/Jambot", // poker.N.M.getAction -> poker.N.M.� -> meerkat.HandEvaluator.handRank(null)
		//"Oddbot/Oddbot", // poker.N.R.getAction -> poker.N.R.� -> poker.N.R.A -> poker.D.E.A(null)
		//"Pokibot/Pokibot", //  poker.N.P.getAction -> poker.N.G.A -> poker.N.G.C(null)
		//"Simbot/Simbot", //  poker.N.Y.getAction -> poker.N.G.A -> poker.N.G.C(null)
		//"Sparbot/Sparbot", // poker.N.J.getAction -> poker.N.J.� -> meerkat.HandEvaluator.isTheNuts (null) 
		//"Vexbot/Vexbot", //   poker.N.C.G.getAction -> meerkat.HandEvaluator.isTheNuts (null)
		//"Xenbot/Xenbot", // poker.N.R.getAction -> poker.N.I.z -> poker.N.I.�(null)
		}; //

		BotRepository botRepository = new BotRepository();
		TableSeater tableSeater = new TableSeater(botRepository, permuteSeats);
		GameIDGenerator gameIDGenerator = new GameIDGenerator(System.nanoTime());
		HandHistoryWriter handHistoryWriter = new HandHistoryWriter();

		String simulationFileName = new SimpleDateFormat("yyMMdd-hhmm").format(new Date());
		handHistoryWriter.setWriter(new FileWriter("history/" + simulationFileName + "-history.txt", true));

		CashGameDescription cashGameDescription = new CashGameDescription();
		cashGameDescription.setSmallBlind(0.01);
		cashGameDescription.setBigBlind(0.02);
		cashGameDescription.setInitialBankRoll(2);
		cashGameDescription.setNumGames(numGames);
		cashGameDescription.setBotNames(botNames);

		// start the game
		GameRunner runner = cashGameDescription.createGameRunner();
		BankrollGraphUI bankrollgraphUI = new BankrollGraphUI();
		runner.addBankrollObserver(bankrollgraphUI);
		DeckFactory deckFactory = SerializedDeck.createFactory("./data/decks/deck-1M.deck");

		///////////////
		// Observers //
		///////////////
		ArrayList<GameObserver> observers = new ArrayList<GameObserver>();

		// hand history
		observers.add(handHistoryWriter);

		// G for PA ???
		PokerAppLauncher pa_launch = new PokerAppLauncher();
		//Class.forName("com.biotools.poker.Q.K", false, pa_launch.launcher).newInstance();

		boolean pa_bot_playing = false;
		final GameObserver G;
		// is a PA bot playing
		for (String botName : botRepository.getBotNames())
		{
			if (botRepository.paClassNameMappings.containsValue(botRepository.getBotMetaData(botName).getBotClassName()))
			{
				pa_bot_playing = true;
				break;
			}
		}
		// if so do things ???
		if (pa_bot_playing)
		{
			G = (GameObserver) Class.forName("com.biotools.poker.N.G", false, pa_launch.launcher).newInstance();
			observers.add(G);
		}

		////////////////////
		// Start the Game //
		////////////////////
		runner.runGame(deckFactory, tableSeater, gameIDGenerator, observers);

		bankrollgraphUI.createGraph(simulationFileName);
	}
}
