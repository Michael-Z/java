package bots.custombots;

import com.biotools.meerkat.Action;
import com.biotools.meerkat.Card;
import com.biotools.meerkat.GameInfo;
import com.biotools.meerkat.HandEvaluator;
import com.biotools.meerkat.Player;
import com.biotools.meerkat.util.Preferences;

/** 
 * A Simple example bot that can plug into Poker Academy
 * 
 * As an example, the bot has one configuration option -- a check
 * box that, when activated, makes the bot always call.
 * 
 * @author adavidson@poker-academy.com
 */
public class ReflexBot implements Player
{

	private int			ourSeat;	// our seat for the current hand
	private Card		c1, c2;	// our hole cards
	private GameInfo	gi;		// general game information
	private Preferences	prefs;		// the configuration options for this bot

	public ReflexBot()
	{
	}

	/**
	 * An event called to tell us our hole cards and seat number
	 * @param c1 your first hole card
	 * @param c2 your second hole card
	 * @param seat your seat number at the table
	 */
	public void holeCards(Card c1, Card c2, int seat)
	{
		this.c1 = c1;
		this.c2 = c2;
		this.ourSeat = seat;
	}

	/**
	 * Requests an Action from the player
	 * Called when it is the Player's turn to act.
	 */
	public Action getAction()
	{

		if (gi.isPreFlop())
		{
			return preFlopAction();
		}
		else
		{
			return postFlopAction();
		}
	}

	/**
	 * Get the current settings for this bot.
	 */
	public Preferences getPreferences()
	{
		return prefs;
	}

	/**
	 * Load the current settings for this bot.
	 */
	public void init(Preferences playerPrefs)
	{
		this.prefs = playerPrefs;
	}

	/**
	 * @return true if debug mode is on.
	 */
	public boolean getDebug()
	{
		return prefs.getBooleanPreference("DEBUG", false);
	}

	/**
	 * print a debug statement.
	 */
	public void debug(String str)
	{
		if (getDebug())
		{
			System.out.println(str);
		}
	}

	/**
	 * print a debug statement with no end of line character
	 */
	public void debugb(String str)
	{
		if (getDebug())
		{
			System.out.print(str);
		}
	}

	/**
	 * A new betting round has started.
	 */
	public void stageEvent(int stage)
	{
	}

	/**
	 * A showdown has occurred.
	 * @param pos the position of the player showing
	 * @param c1 the first hole card shown
	 * @param c2 the second hole card shown
	 */
	public void showdownEvent(int seat, Card c1, Card c2)
	{
	}

	/**
	 * A new game has been started.
	 * @param gi the game stat information
	 */
	public void gameStartEvent(GameInfo gInfo)
	{
		this.gi = gInfo;
	}

	/**
	 * An event sent when all players are being dealt their hole cards
	 */
	public void dealHoleCardsEvent()
	{
	}

	/**
	 * An action has been observed. 
	 */
	public void actionEvent(int pos, Action act)
	{
	}

	/**
	 * The game info state has been updated
	 * Called after an action event has been fully processed
	 */
	public void gameStateChanged()
	{
	}

	/**
	 * The hand is now over. 
	 */
	public void gameOverEvent()
	{
	}

	/**
	 * A player at pos has won amount with the hand handName
	 */
	public void winEvent(int pos, double amount, String handName)
	{
	}

	/**
	 * Plays pocket pairs 6 and up (pre-flop)
	 * Plays king seven or better
	 * Plays jack 9 or better
	 * Plays suited connector > 6
	 * Folds all other hands.
	 */
	private Action preFlopAction()
	{
		double toCall = gi.getAmountToCall(ourSeat);

		// Call if we are big blind.
		if (toCall == 0)
		{
			return Action.callAction(toCall);
		}

		// Plays all pocket pairs >= 6
		if (c1.getRank() == c2.getRank())
		{
			if (c1.getRank() >= Card.SIX)
			{
				return Action.callAction(toCall);
			}
		}

		// Calls king and seven or better
		if (c1.getRank() >= Card.KING || c2.getRank() >= Card.KING)
		{
			if (c1.getRank() >= Card.SEVEN && c2.getRank() >= Card.SEVEN)
			{
				return Action.callAction(toCall);
			}
		}
		// Calls 10 9 or better
		if (c1.getRank() >= Card.JACK || c2.getRank() >= Card.JACK)
		{
			if (c1.getRank() >= Card.NINE && c2.getRank() >= Card.NINE)
			{
				return Action.callAction(toCall);
			}
		}

		// play any suited connector > 6
		if (c1.getSuit() == c2.getSuit())
		{
			if (Math.abs(c1.getRank() - c2.getRank()) == 1 && (c1.getRank() >= Card.SIX && c2.getRank() >= Card.SIX))
			{
				return Action.callAction(toCall);
			}
		}

		// Fold anything else
		return Action.checkOrFoldAction(toCall);
	}

	/**
	 * Calls on hands with 50% > x <= 70% of winning
	 * Raise/Bet on hands with x > 70% chance of winning
	 * Goes all in if it knows it has the best hand
	 * Fold all other hands 
	 */
	private Action postFlopAction()
	{
		double toCall = gi.getAmountToCall(ourSeat);
		int numPlayers = gi.getNumActivePlayers();

		// Plays all pocket pairs >= 6
		if (c1.getRank() == c2.getRank())
		{
			if (c1.getRank() >= Card.SIX)
			{
				return Action.callAction(toCall);
			}
		}

		double handRank = HandEvaluator.handRank(c1, c2, gi.getBoard(), numPlayers - 1);

		if (handRank == 1.0)
		{
			// Going all in baby
			return Action.raiseAction(toCall, gi.getBankRoll(ourSeat));
		}
		else if (handRank >= 0.7)
		{
			return Action.raiseAction(gi);
		}
		else if (handRank > 0.5)
		{
			return Action.callAction(toCall);
		}
		else
		{
			return Action.checkOrFoldAction(toCall);
		}
	}

}