package bots;

import java.io.File;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.logging.Logger;

import com.biotools.meerkat.Player;
import com.biotools.meerkat.util.Preferences;
import com.biotools.poker.PokerAppLauncher;

/**
 * A BotRepository is responsible for loading Meerkat-Bots that are defined in
 * the /data/bots directory of the program in *.pd-files.<br>
 * <br>
 * Currently not supported properties: PLAYER_JAR_FILE <br>
 * 
 */
public class BotRepository
{
	// key = botname in canonical form AINAME/BOTNAME
	private Map<String, BotMetaData>	botNameToBots		= new HashMap<String, BotMetaData>();
	// mappings from PA-Bot-Classnames to their encrypted Counterparts
	public Map<String, String>			paClassNameMappings	= new HashMap<String, String>();
	private Logger						log					= Logger.getLogger(this.getClass().getName());
	PokerAppLauncher					pa_launch;

	public BotRepository()
	{
		pa_launch = new PokerAppLauncher();

		fillPAClassNames();
		findBots(new File("./data/bots"));
	}

	private void fillPAClassNames()
	{
		// there are two ways of running against PokerAcademy-bots
		// 1) get class-files from encrypted PA-file (not allowed) and create the 'Randomizer' class
		// which is not part of the meerkat-API but referenced in the 'Deck'-class of the public
		// meerkat API
		// 2) create a DummyBot for PA, which starts a new Frame with our testbed, so all PA-bots
		// are available in the classpath
		paClassNameMappings.put("com.biotools.poker.opponent.OptiOpponent", "com.biotools.poker.N.J");
		paClassNameMappings.put("com.biotools.poker.opponent.MiximaxOpponent", "com.biotools.poker.N.A");
		paClassNameMappings.put("com.biotools.poker.opponent.PokiOpponent", "com.biotools.poker.N.D");
		paClassNameMappings.put("com.biotools.poker.opponent.PokiSimOpponent", "com.biotools.poker.N.E");
		paClassNameMappings.put("com.biotools.poker.opponent.JagOpponent", "com.biotools.poker.N.V");
		paClassNameMappings.put("com.biotools.poker.opponent.NLOpponent", "com.biotools.poker.N.F");
		paClassNameMappings.put("com.biotools.poker.opponent.DPSOpponent", "com.biotools.poker.N.Z");
		paClassNameMappings.put("com.biotools.poker.opponent.SklanskyOpponent", "com.biotools.poker.N.M");
		paClassNameMappings.put("com.biotools.poker.opponent.AveryBot", "com.biotools.poker.N.K");
		paClassNameMappings.put("com.biotools.poker.opponent.Sigmind", "com.biotools.poker.N.O");
		paClassNameMappings.put("com.biotools.poker.opponent.HybridOpponent", "com.biotools.poker.N.B");
		paClassNameMappings.put("OptiOpponent", "com.biotools.poker.N.J");
		paClassNameMappings.put("MiximaxOpponent", "com.biotools.poker.N.A");
		paClassNameMappings.put("PokiOpponent", "com.biotools.poker.N.D");
		paClassNameMappings.put("PokiSimOpponent", "com.biotools.poker.N.E");
		paClassNameMappings.put("JagOpponent", "com.biotools.poker.N.V");
		paClassNameMappings.put("NLOpponent", "com.biotools.poker.N.F");
		paClassNameMappings.put("DPSOpponent", "com.biotools.poker.N.Z");
		paClassNameMappings.put("SklanskyOpponent", "com.biotools.poker.N.M");
		paClassNameMappings.put("AveryBot", "com.biotools.poker.N.K");
		paClassNameMappings.put("Sigmind", "com.biotools.poker.N.O");

	}

	/**
	 * searches recursivly through the given directory to find *.pd files
	 */
	private void findBots(File botDirectory)
	{
		File[] dirEntries = botDirectory.listFiles();
		for (File file : dirEntries)
		{
			if (file.isDirectory())
			{
				findBots(file);
			}
			else if (file.getName().endsWith(".pd"))
			{
				readBotFromMeerkatFile(file);
			}
		}
	}

	private void readBotFromMeerkatFile(File meerkatPDFile)
	{
		Preferences prefs = new Preferences(meerkatPDFile);
		String botClassName = prefs.getPreference("PLAYER_CLASS");
		boolean isPAbot = false;
		if (botClassName.endsWith("PlugInOpponent"))
		{
			// PlugInOpponent is just a Decorator used in PA to allow for
			// special classLoading.
			// For now we expect all bots on the classpath
			botClassName = prefs.getPreference("BOT_PLAYER_CLASS");
		}

		if (paClassNameMappings.get(botClassName) != null)
		{
			botClassName = paClassNameMappings.get(botClassName);
			isPAbot = true;
		}

		String playerName = prefs.getPreference("PLAYER_NAME");
		String aiName = prefs.getPreference("AI_NAME");
		String fullName = aiName + "/" + playerName;
		boolean noLimitBot = prefs.getBoolean("NO_LIMIT", false);

		try
		{
			if (isPAbot)
				Class.forName(botClassName, false, pa_launch.launcher);
			else
				Class.forName(botClassName);

			botNameToBots.put(fullName, new BotMetaData(fullName, botClassName, noLimitBot, prefs));
		}
		catch (ClassNotFoundException e)
		{
			log.fine("Bot '" + botClassName + "' from '" + meerkatPDFile + "' could not be loaded");
		}
	}

	/**
	 * @return names of all bots found
	 */
	public Set<String> getBotNames()
	{
		return Collections.unmodifiableSet(botNameToBots.keySet());
	}

	/**
	 * @param botName
	 * @return BotMetaData of bot with given name (or null if not existent)
	 */
	public BotMetaData getBotMetaData(String botName)
	{
		return botNameToBots.get(botName);
	}

	/**
	 * creates a bot and initializes it.
	 * 
	 * @param string
	 * @return
	 * @throws IllegalArgumentException
	 *             if bot doesn't exist
	 */

	public Player createBot(String botName)
	{
		BotMetaData botMetaData = botNameToBots.get(botName);
		if (botMetaData == null)
		{
			throw new IllegalArgumentException("Bot '" + botName + "' does not exist");
		}
		try
		{
			boolean isPAbot = false;
			if (paClassNameMappings.containsValue(botMetaData.getBotClassName()))
			{
				isPAbot = true;
			}

			Class<?> botClass = null;
			if (isPAbot)
			{
				botClass = Class.forName(botMetaData.getBotClassName(), false, pa_launch.launcher);
			}
			else
				botClass = Class.forName(botMetaData.getBotClassName());

			Player botInstance = (Player) botClass.newInstance();
			botInstance.init(botMetaData.getBotPreferences());
			return botInstance;
		}
		catch (Exception e)
		{
			throw new RuntimeException("Error creating bot '" + botName + "'", e);
		}

	}

	/**
	 * add a bot manually without *.pd-file
	 * @param botMetaData
	 */
	public void addBot(BotMetaData botMetaData)
	{
		botNameToBots.put(botMetaData.getBotName(), botMetaData);
	}
}
